import os
import tensorflow as tf
import skimage
import matplotlib.pyplot as plt
from skimage import transform
from skimage.color import rgb2gray
import numpy as np
import random

def load_data(path, labels):

images = []


print("Loading images")
for directory in directories:
for file in os.listdir(directory):
images.append(skimage.data.imread(os.path.join(directory+file)))



return images, str(open(labels)).split(",")

images, labels = load_data(path)


print("Resize inputs")
images = [transform.resize(image, (100, 100)) for image in images]



print("Define placeholder")
x = tf.placeholder(dtype = tf.float32, shape = [None, 100, 100, 3])
y = tf.placeholder(dtype = tf.int32, shape = [None])



print("Flattening inputs")
images_flat = tf.contrib.layers.flatten(x)


print("Build network layers")
logits = tf.contrib.layers.fully_connected(images_flat, len(labels), tf.nn.relu)


print("Defining loss function")
loss = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels = y, logits = logits))

print("defining optimizer")
train_op = tf.train.AdamOptimizer(learning_rate=0.001).minimize(loss)

print("Building label indexes")
correct_pred = tf.argmax(logits, 1)

print("Calculating accuracy metrics")
accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))

print("images_flat: ", images_flat)
print("logits: ", logits)
print("loss: ", loss)
print("predicted_labels: ", correct_pred)


tf.set_random_seed(1234)

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for i in range(201):
        _, loss_value = sess.run([train_op, loss], feed_dict={x: images, y: labels})
        if i % 10 == 0:
            print("Loss: ", loss)




   
    sample_indexes = random.sample(range(len(images)), 10)
    sample_images = [images[i] for i in sample_indexes]
    sample_labels = [labels[i] for i in sample_indexes]

   
    predicted = sess.run([correct_pred], feed_dict={x: sample_images})[0]
                           
   
    print(sample_labels)
    print(predicted)

   
    fig = plt.figure(figsize=(10, 10))
    for i in range(len(sample_images)):
        truth = sample_labels[i]
        prediction = predicted[i]
        plt.subplot(5, 2,1+i)
        plt.axis('off')
        color='green' if truth == prediction else 'red'
        plt.text(40, 10, "Truth:        {0}\nPrediction: {1}".format(truth, prediction),
                 fontsize=12, color=color)
        plt.imshow(sample_images[i])

    plt.show()